NODAL PROG:


#include "msp430g2553.h"
#include "intrinsics.h"
#define TXLED BIT0
#define RXLED BIT6
#define TXD BIT2
#define RXD BIT1
 
char string[] = {"a test\r\n"};                 //String, to store the nodal id and status
unsigned int i;                                 //Counter for storing the position of current letter
 
int main(void)
{
   WDTCTL = WDTPW + WDTHOLD;                    // Stop WDT
   
   /* ADC configuration,V+ref=3V,V-ref=0V,Channel=A0 */
   
   ADC10CTL0  = ADC10ON + ADC10IE;              // Vref Vr+=3v,Vr-=VSS, S&Htime = 4 X ADCCLK,ADC10 on,ADC interrupts enabled
   ADC10CTL1  = INCH_4+ADC10DIV_7;              // INCH_4=0011->A0,ADCCLK src = ADC10CLK, ADCCLK/8,Single Channel Single Conversion                         
   ADC10AE0   = INCH_4;                         // channel A4
   
   /* Selecting the clock source */
   
   DCOCTL = 0;                                  // Select lowest DCOx and MODx settings
   BCSCTL1 = CALBC1_1MHZ;                       // Set DCO
   DCOCTL = CALDCO_1MHZ;                        //the above 3 lines to configure the internal oscillator at 1MHz
   
   /*Configuring the Ports*/
   
   P2DIR |= 0xFF;                               // All P2.x outputs
   P2OUT &= 0x00;                               // All P2.x reset
   P1SEL |= RXD + TXD ;                         // P1.1 = RXD, P1.2=TXD
   P1SEL2 |= RXD + TXD ;                        // P1.1 = RXD, P1.2=TXD
   P1DIR |= RXLED + TXLED;
   P1OUT &= 0x00;
   
   /*Configuring the UART for serial communication*/
   
   UCA0CTL1 |= UCSSEL_2;                        //Selecting clock source as SMCLK
   UCA0BR0 = 0x08;                              // 1MHz/8=125000
   UCA0BR1 = 0x00;
   UCA0MCTL = UCBRS2 + UCBRS0;                  // Modulation UCBRSx = 5 to control error
   UCA0CTL1 &= ~UCSWRST;                        // **Initialize USCI state machine**
   UC0IE |= UCA0RXIE;                           // Enable USCI_A0 RX interrupt
   __bis_SR_register(CPUOFF + GIE);             // Enter LPM0 w/ int until Byte RXed
   
   /* Loop to keep MSP in LMP0 */
   
   while (1)
   { }
}
 
/* USCI TX Interrupt Vector */

#pragma vector=USCIAB0TX_VECTOR
__interrupt void USCI0TX_ISR(void)
{
   P1OUT |= TXLED; 
     UCA0TXBUF = string[i++];                   // TX next character 
    if (i == sizeof string - 1)                 // TX over? 
       UC0IE &= ~UCA0TXIE;                      // Disable USCI_A0 TX interrupt 
    P1OUT &= ~TXLED;
     __bis_SR_register(CPUOFF + GIE);           // Enter LPM0
}

/* USCI RX Interrupt Vector */

#pragma vector=USCIAB0RX_VECTOR 
__interrupt void USCI0RX_ISR(void) 
{ 
   P1OUT |= RXLED;                              // Turn the led on 
    if (UCA0RXBUF == 'a')                       //Check if Nodal id= recieved byte
    {
      ADC10CTL0 |= ENC + ADC10SC;               //Start Conversion since: Nodal id=recieved byte
       i = 0;                                   // Points to string[0] 
       UC0IE |= UCA0TXIE;                       // Enable USCI_A0 TX interrupt 
      UCA0TXBUF = string[i++];                  // Send first Byte 
    }
    _BIS_SR(LPM0_bits +GIE);                    //Enter LPM0
    P1OUT &= ~RXLED;                            // Turn the led off
}

/* ADC10 Interrupt Vector */

#pragma vector = ADC10_VECTOR
__interrupt void adc10_interrupt(void)
{
  if(ADC10MEM>0x01B0)
  {
  char string[] = { "a wet\r\n" };
  }
  else
  {
  char string[] = { "a dry\r\n" };
  }
}